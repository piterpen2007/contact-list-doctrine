<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd"
>

    <imports>
        <import resource="app.config.xml"/>
    </imports>
    <parameters>
        <parameter key="controllerNs">EfTech\ContactList\Controller</parameter>
    </parameters>
<services>
    <defaults autowire="true" public="false">
        <bind key="string $pathToRecipients"
              type="expression">service(
            'EfTech\\ContactList\\Config\\AppConfig'
            ).getPathToRecipients()
        </bind>
        <bind key="string $pathToKinsfolk"
              type="expression">service(
            'EfTech\\ContactList\\Config\\AppConfig'
            ).getPathToKinsfolk()
        </bind>
        <bind key="string $pathToCustomers"
              type="expression">service(
            'EfTech\\ContactList\\Config\\AppConfig'
            ).getPathToCustomers()
        </bind>
        <bind key="string $pathToColleagues"
              type="expression">service(
            'EfTech\\ContactList\\Config\\AppConfig'
            ).getPathToColleagues()
        </bind>
        <bind key="string $pathToContactList"
              type="expression">service(
            'EfTech\\ContactList\\Config\\AppConfig'
            ).getPathToContactList()
        </bind>
        <bind key="string $pathToAddress"
              type="expression">service(
            'EfTech\\ContactList\\Config\\AppConfig'
            ).getPathToAddresses()
        </bind>
        <bind key="string $pathToUsers"
              type="expression">service(
            'EfTech\\ContactList\\Config\\AppConfig'
            ).getPathToUsers()
        </bind>
        <bind key="string $pathToFile"
              type="expression">service(
            'EfTech\\ContactList\\Config\\AppConfig'
            ).getPathToLogFile()
        </bind>
        <bind key="string $controllerNs">%controllerNs%</bind>
    </defaults>




    <prototype namespace="EfTech\ContactList\" resource="./../../src"/>
    <prototype namespace="EfTech\ContactList\Infrastructure\"
               resource="./../../vendor/eff-tech/framework-home/src"
               exclude="./../../vendor/eff-tech/framework-home/src/{Router,http}"
    />

    <instanceof id="EfTech\ContactList\Infrastructure\Controller\ControllerInterface" public="true"/>
    <instanceof id="EfTech\ContactList\Infrastructure\Console\CommandInterface" public="true"/>

    <service id="Nyholm\Psr7\Factory\Psr17Factory"/>

    <service id="Psr\Http\Message\UriFactoryInterface" alias="Nyholm\Psr7\Factory\Psr17Factory"/>
    <service id="Psr\Http\Message\ResponseFactoryInterface" alias="Nyholm\Psr7\Factory\Psr17Factory"/>
    <service id="Psr\Http\Message\StreamFactoryInterface" alias="Nyholm\Psr7\Factory\Psr17Factory"/>


    <service
            id="EfTech\ContactList\Infrastructure\Console\Output\OutputInterface"
            class="EfTech\ContactList\Infrastructure\Console\Output\EchoOutput"
            public="true"
    />

    <service id="EfTech\ContactList\Config\AppConfig" public="true">
        <factory class="EfTech\ContactList\Config\AppConfig" method="createFromArray"/>
        <argument key="$config">%app.configs%</argument>
    </service>



    <service id="EfTech\ContactList\Infrastructure\Auth\HttpAuthProvider">
        <argument key="$loginUri" type="service">
            <service class="Nyholm\Psr7\Uri">
                <argument key="$uri" type="expression">service('EfTech\\ContactList\\Config\\AppConfig').getLoginUri()</argument>
            </service>
        </argument>
</service>

    <service
            id="EfTech\ContactList\Infrastructure\Auth\UserDataStorageInterface"
            class="EfTech\ContactList\Repository\UserJsonFileRepository">
    </service>
    <service id="EfTech\ContactList\Infrastructure\Session\SessionInterface">
        <factory class="EfTech\ContactList\Infrastructure\Session\SessionNative" method="create"/>
    </service>

<service id="EfTech\ContactList\Infrastructure\DataLoader\DataLoaderInterface"
         class="EfTech\ContactList\Infrastructure\DataLoader\JsonDataLoader"/>


    <service id="EfTech\ContactList\Entity\ContactRepositoryInterface"
             class="EfTech\ContactList\Repository\ContactJsonRepository"
    >
    </service>


    <service id="EfTech\ContactList\Entity\ContactListRepositoryInterface"
             class="EfTech\ContactList\Repository\ContactListJsonRepository"
    >
    </service>


    <service id="EfTech\ContactList\Entity\CustomerRepositoryInterface"
             class="EfTech\ContactList\Repository\CustomerJsonFileRepository"
    >
    </service>



    <service id="EfTech\ContactList\Entity\RecipientRepositoryInterface"
             class="EfTech\ContactList\Repository\RecipientJsonFileRepository"
    >
    </service>



    <service id="EfTech\ContactList\Infrastructure\View\RenderInterface"
             class="EfTech\ContactList\Infrastructure\View\DefaultRender"
             public="true"
    />






    <service id="Symfony\Component\Form\FormFactory">
        <argument key="$registry" type="service" id="Symfony\Component\Form\FormRegistryInterface"/>
    </service>

    <service id="Symfony\Component\Form\FormRegistryInterface" alias="Symfony\Component\Form\FormRegistry"/>

    <service id="Symfony\Component\Form\FormRegistry">
        <argument key="$extensions" type="collection"/>
        <argument key="$resolvedTypeFactory" type="service" id="Symfony\Component\Form\ResolvedFormTypeFactoryInterface"/>
    </service>

    <service id="Symfony\Component\Form\ResolvedFormTypeFactoryInterface" alias="Symfony\Component\Form\ResolvedFormTypeFactory"/>

    <service id="Symfony\Component\Form\ResolvedFormTypeFactory"/>




</services>
</container>