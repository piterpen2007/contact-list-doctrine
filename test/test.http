### Тестирование поиска даты рождения и профессии знакомых по id
GET http://localhost:8082/recipients?id_recipient=1

> {%
   client.test('Тестирование поиска даты рождения и профессии знакомых по id', function () {
   client.assert(response.status === 200, 'Проверяю код ответа. Фактическое знаение: ' + response.status);
   client.assert(response.contentType.mimeType === "application/json", 'Проверяю application/json. Фактическое знаение: ' + response.contentType.mimeType);
   client.assert(response.body[0]['id_recipient'] === 1, "id получателя не корректен");
   client.assert(response.body[0]['full_name'] === "Осипов Геннадий Иванович", "полное имя не корректно");
   client.assert(response.body[0]['birthday'] === "15.06.1985", "день рождения не корректно");
   client.assert(response.body[0]['profession'] === "Системный администратор", "профессия не корректна");
 });
 %}

### Тестирование поиска даты рождения и профессии знакомых по полному имени
GET http://localhost:8082/recipients?full_name=Осипов Геннадий Иванович


> {%
   client.test('Тестирование поиска даты рождения и профессии знакомых по полному имени', function () {
   client.assert(response.status === 200, 'Проверяю код ответа. Фактическое знаение: ' + response.status);
   client.assert(response.contentType.mimeType === "application/json", 'Проверяю application/json. Фактическое знаение: ' + response.contentType.mimeType);
   client.assert(response.body[0]['id_recipient'] === 1, "id получателя не корректен");
   client.assert(response.body[0]['full_name'] === "Осипов Геннадий Иванович", "полное имя не корректно");
   client.assert(response.body[0]['birthday'] === "15.06.1985", "день рождения не корректно");
   client.assert(response.body[0]['profession'] === "Системный администратор", "профессия не корректна");
 });
 %}

### Тестирование поиска времени беспокойства клиента по имени.
GET http://localhost:8082/customers?full_name=Калинин Пётр Александрович

> {%
   client.test('Тестирование поиска времени беспокойства клиента по имени.', function () {
   client.assert(response.status === 200, 'Проверяю код ответа. Фактическое знаение: ' + response.status);
   client.assert(response.contentType.mimeType === "application/json", 'Проверяю application/json. Фактическое знаение: ' + response.contentType.mimeType);
   client.assert(response.body[0]['id_recipient'] === 7, "id получателя не корректен");
   client.assert(response.body[0]['full_name'] === "Калинин Пётр Александрович", "полное имя не корректно");
   client.assert(response.body[0]['birthday'] === "04.06.1983", "день рождения не корректно");
   client.assert(response.body[0]['contract_number'] === "5684", "номер не корректен");
   client.assert(response.body[0]['average_transaction_amount'] === 2500, "средняя транзакция некорректна");
   client.assert(response.body[0]['discount'] === "5%", "скидка не корректна");
   client.assert(response.body[0]['time_to_call'] === "С 9:00 до 13:00 в будни", "время не корректно");
 });
 %}

### Тестирование поиска контактов по категориям(клиенты)
GET http://localhost:8082/contact?category=customers

> {%
   client.test('Тестирование поиска контактов по категориям(клиенты)', function () {
   client.assert(response.status === 200, 'Проверяю код ответа. Фактическое знаение: ' + response.status);
   client.assert(response.contentType.mimeType === "application/json", 'Проверяю application/json. Фактическое знаение: ' + response.contentType.mimeType);
   client.assert(response.body.hasOwnProperty('length') && response.body.length === 3, "В ответе есть 3 элемента");
 });
 %}

### Тестирование поиска контактов по категориям(получатели)
GET http://localhost:8082/contact?category=recipients

> {%
   client.test('Тестирование поиска контактов по категориям(получатели)', function () {
   client.assert(response.status === 200, 'Проверяю код ответа. Фактическое знаение: ' + response.status);
   client.assert(response.contentType.mimeType === "application/json", 'Проверяю application/json. Фактическое знаение: ' + response.contentType.mimeType);
   client.assert(response.body.hasOwnProperty('length') && response.body.length === 5, "В ответе есть 5 элементов");
 });
 %}

### Тестирование поиска контактов по категориям(коллеги)
GET http://localhost:8082/contact?category=colleagues

> {%
   client.test('Тестирование поиска контактов по категориям(коллеги)', function () {
   client.assert(response.status === 200, 'Проверяю код ответа. Фактическое знаение: ' + response.status);
   client.assert(response.contentType.mimeType === "application/json", 'Проверяю application/json. Фактическое знаение: ' + response.contentType.mimeType);
   client.assert(response.body.hasOwnProperty('length') && response.body.length === 2, "В ответе есть 2 элемента");
 });
 %}

### Тестирование поиска контактов по категориям(родня)
GET http://localhost:8082/contact?category=kinsfolk

> {%
   client.test('Тестирование поиска контактов по категориям(родня)', function () {
   client.assert(response.status === 200, 'Проверяю код ответа. Фактическое знаение: ' + response.status);
   client.assert(response.contentType.mimeType === "application/json", 'Проверяю application/json. Фактическое знаение: ' + response.contentType.mimeType);
   client.assert(response.body.hasOwnProperty('length') && response.body.length === 1, "В ответе есть 1 элемент");
 });
 %}

### Тестирование ситуации, когда передали некорректные данные по имени в поиске по клиентам
GET http://localhost:8082/customers?full_name[]=Калинин Пётр Александрович

> {%
     client.test("Тестирование ситуации, когда передали некорректные данные по имени в поиске по клиентам", function () {
            client.assert(response.status === 500, 'Проверяю код ответа. Фактическое знаение: ' + response.status);
            client.assert(response.contentType.mimeType === "application/json", 'Проверяю application/json. Фактическое знаение: ' + response.contentType.mimeType);
            client.assert(response.body['status'] === "fail", "Некорректный статус");
            client.assert(response.body['message'] === "incorrect full_name", "Некорректное сообщение");
     })
 %}

### Тестирование ситуации, когда передали некорректные данные по id в поиске по клиентам
GET http://localhost:8082/customers?id_recipient[]=1

> {%
     client.test("Тестирование ситуации, когда передали некорректные данные по id в поиске по клиентам", function () {
            client.assert(response.status === 500, 'Проверяю код ответа. Фактическое знаение: ' + response.status);
            client.assert(response.contentType.mimeType === "application/json", 'Проверяю application/json. Фактическое знаение: ' + response.contentType.mimeType);
            client.assert(response.body['status'] === "fail", "Некорректный статус");
            client.assert(response.body['message'] === "incorrect id_recipient", "Некорректное сообщение");
     })
 %}


### Тестирование запроса без path
GET http://localhost:8082/?param=ru

> {%
     client.test("Тестирование запроса без path", function () {
            client.assert(response.status === 404, 'Проверяю код ответа. Фактическое знаение: ' + response.status);
            client.assert(response.contentType.mimeType === "application/json", 'Проверяю application/json. Фактическое знаение: ' + response.contentType.mimeType);
            client.assert(response.body['status'] === "fail", "Некорректный статус");
            client.assert(response.body['message'] === "unsupported request", "Некорректное сообщение");
     })
 %}


### Тестирование неподдерживаемого приложения url
GET http://localhost:8082/hhh?param=ru

> {%
     client.test("Тестирование неподдерживаемого приложения url", function () {
            client.assert(response.status === 404, 'Проверяю код ответа. Фактическое знаение: ' + response.status);
            client.assert(response.contentType.mimeType === "application/json", 'Проверяю application/json. Фактическое знаение: ' + response.contentType.mimeType);
            client.assert(response.body['status'] === "fail", "Некорректный статус");
            client.assert(response.body['message'] === "unsupported request", "Некорректное сообщение");
     })
 %}


### Тестирование ситуации, когда передали некорректное id получателя в поиске по знакомым
GET http://localhost:8082/recipients?id_recipient[]=1

> {%
     client.test("Тестирование ситуации, когда передали некорректное id получателя в поиске по знакомым", function () {
            client.assert(response.status === 500, 'Проверяю код ответа. Фактическое знаение: ' + response.status);
            client.assert(response.contentType.mimeType === "application/json", 'Проверяю application/json. Фактическое знаение: ' + response.contentType.mimeType);
            client.assert(response.body['status'] === "fail", "Некорректный статус");
            client.assert(response.body['message'] === "incorrect id_recipient", "Некорректное сообщение");
     })
 %}

### Тестирование ситуации, когда передали некорректное full_name получателя в поиске по знакомым
GET http://localhost:8082/recipients?full_name[]=Осипов Геннадий Иванович

> {%
     client.test("Тестирование ситуации, когда передали некорректное full_name получателя в поиске по знакомым", function () {
            client.assert(response.status === 500, 'Проверяю код ответа. Фактическое знаение: ' + response.status);
            client.assert(response.contentType.mimeType === "application/json", 'Проверяю application/json. Фактическое знаение: ' + response.contentType.mimeType);
            client.assert(response.body['status'] === "fail", "Некорректный статус");
            client.assert(response.body['message'] === "incorrect full_name", "Некорректное сообщение");
     })
 %}



### Тестирование ситуация, когда передали некорректные даанные по категории
GET http://localhost:8082/contact?category=privet

> {%
     client.test("Тестирование ситуация, когда передали некорректные даанные по категории", function () {
            client.assert(response.status === 404, 'Проверяю код ответа. Фактическое знаение: ' + response.status);
            client.assert(response.contentType.mimeType === "application/json", 'Проверяю application/json. Фактическое знаение: ' + response.contentType.mimeType);
            client.assert(response.body['status'] === "fail", "Некорректный статус");
            client.assert(response.body['message'] === "dispatch category nothing", "Некорректное сообщение");
     })
 %}

### Тестирование ситуации, когда передали пустую категорию через универсальный роутер
GET http://localhost:8082/contact

> {%
   client.test('### Тестирование ситуации, когда передали пустую категорию через универсальный роутер', function () {
   client.assert(response.status === 200, 'Проверяю код ответа. Фактическое знаение: ' + response.status);
   client.assert(response.contentType.mimeType === "application/json", 'Проверяю application/json. Фактическое знаение: ' + response.contentType.mimeType);
   client.assert(response.body.hasOwnProperty('length') && response.body.length === 11, "В ответе есть 5 элемента");
 });
 %}

### Тестирование поиска клиента по дисконту
GET http://localhost:8082/customers?time_to_call=С 9:00 до 13:00 в будни

> {%
   client.test('Тестирование поиска времени беспокойства клиента по имени.', function () {
   client.assert(response.status === 200, 'Проверяю код ответа. Фактическое знаение: ' + response.status);
   client.assert(response.contentType.mimeType === "application/json", 'Проверяю application/json. Фактическое знаение: ' + response.contentType.mimeType);
   client.assert(response.body[0]['id_recipient'] === 7, "id получателя не корректен");
   client.assert(response.body[0]['full_name'] === "Калинин Пётр Александрович", "полное имя не корректно");
   client.assert(response.body[0]['birthday'] === "04.06.1983", "день рождения не корректно");
   client.assert(response.body[0]['contract_number'] === "5684", "номер не корректен");
   client.assert(response.body[0]['average_transaction_amount'] === 2500, "средняя транзакция некорректна");
   client.assert(response.body[0]['discount'] === "5%", "скидка не корректна");
   client.assert(response.body[0]['time_to_call'] === "С 9:00 до 13:00 в будни", "время не корректно");
 });
 %}

### Тестирование поиска получателя по id через роутеры
GET http://localhost:8082/recipients/1

> {%
   client.test('### Тестирование поиска получателя по id через роутеры', function () {
   client.assert(response.status === 200, 'Проверяю код ответа. Фактическое знаение: ' + response.status);
   client.assert(response.contentType.mimeType === "application/json", 'Проверяю application/json. Фактическое знаение: ' + response.contentType.mimeType);
   client.assert(response.body['id_recipient'] === 1, "id получателя не корректен");
   client.assert(response.body['full_name'] === "Осипов Геннадий Иванович", "полное имя не корректно");
   client.assert(response.body['birthday'] === "15.06.1985", "день рождения не корректно");
   client.assert(response.body['profession'] === "Системный администратор", "профессия не корректна");
 });
 %}


### Тестирование ситуации, когда нету нужного получателя по id через универсальный роутер
GET http://localhost:8082/recipients/0

> {%
     client.test("### Тестирование ситуации, огда нету нужного получателя по id через универсальный роутер", function () {
            client.assert(response.status === 404, 'Проверяю код ответа. Фактическое знаение: ' + response.status);
            client.assert(response.contentType.mimeType === "application/json", 'Проверяю application/json. Фактическое знаение: ' + response.contentType.mimeType);
            client.assert(response.body['status'] === "fail", "Некорректный статус");
            client.assert(response.body['message'] === "entity not found", "Некорректное сообщение");
     })
 %}

### Тестирование поиска клиента по id через роутеры через универсальный роутер
GET http://localhost:8082/customers/7

> {%
   client.test('Тестирование поиска клиента по id через роутеры через универсальный роутер', function () {
   client.assert(response.status === 200, 'Проверяю код ответа. Фактическое знаение: ' + response.status);
   client.assert(response.contentType.mimeType === "application/json", 'Проверяю application/json. Фактическое знаение: ' + response.contentType.mimeType);
   client.assert(response.body['id_recipient'] === 7, "id получателя не корректен");
   client.assert(response.body['full_name'] === "Калинин Пётр Александрович", "полное имя не корректно");
   client.assert(response.body['birthday'] === "04.06.1983", "день рождения не корректно");
   client.assert(response.body['contract_number'] === "5684", "номер не корректен");
   client.assert(response.body['average_transaction_amount'] === 2500, "средняя транзакция некорректна");
   client.assert(response.body['discount'] === "5%", "скидка не корректна");
   client.assert(response.body['time_to_call'] === "С 9:00 до 13:00 в будни", "время не корректно");
 });
 %}


### Тестирование ситуации, когда нету нужного клиента по id через универсальный роутер
GET http://localhost:8082/customers/2

> {%
     client.test("### Тестирование ситуации, когда нету нужного клиента по id через универсальный роутер", function () {
            client.assert(response.status === 404, 'Проверяю код ответа. Фактическое знаение: ' + response.status);
            client.assert(response.contentType.mimeType === "application/json", 'Проверяю application/json. Фактическое знаение: ' + response.contentType.mimeType);
            client.assert(response.body['status'] === "fail", "Некорректный статус");
            client.assert(response.body['message'] === "entity not found", "Некорректное сообщение");
     })
 %}

### Тестирование поиска контактов по категории Клиенты через универсальный роутер
GET http://localhost:8082/contact/customers

> {%
   client.test('### Тестирование поиска контактов по категории Клиенты через универсальный роутер', function () {
   client.assert(response.status === 200, 'Проверяю код ответа. Фактическое знаение: ' + response.status);
   client.assert(response.contentType.mimeType === "application/json", 'Проверяю application/json. Фактическое знаение: ' + response.contentType.mimeType);
   client.assert(response.body.hasOwnProperty('length') && response.body.length === 3, "В ответе есть 3 элемента");
 });
 %}

### Тестирование поиска контактов по категории Получатели через универсальный роутер
GET http://localhost:8082/contact/recipients

> {%
   client.test('### Тестирование поиска контактов по категории Клиенты', function () {
   client.assert(response.status === 200, 'Проверяю код ответа. Фактическое знаение: ' + response.status);
   client.assert(response.contentType.mimeType === "application/json", 'Проверяю application/json. Фактическое знаение: ' + response.contentType.mimeType);
   client.assert(response.body.hasOwnProperty('length') && response.body.length === 5, "В ответе есть 5 элемента");
 });
 %}

### Тестирование ситуации, когда передали некорректную категорию
GET http://localhost:8082/contact/privet

> {%
     client.test("Тестирование ситуации, когда передали некорректную категорию", function () {
            client.assert(response.status === 404, 'Проверяю код ответа. Фактическое знаение: ' + response.status);
            client.assert(response.contentType.mimeType === "application/json", 'Проверяю application/json. Фактическое знаение: ' + response.contentType.mimeType);
            client.assert(response.body['status'] === "fail", "Некорректный статус");
            client.assert(response.body['message'] === "dispatch category nothing", "Некорректное сообщение");
     })
 %}


### Отправка контакта в черный список
PUT http://localhost:8082/contactList/6/moveToBlacklist

> {%
   client.test('Отправка контакта в черный список', function () {
   client.assert(response.status === 200, 'Проверяю код ответа. Фактическое знаение: ' + response.status);
   client.assert(response.contentType.mimeType === "application/json", 'Проверяю application/json. Фактическое знаение: ' + response.contentType.mimeType);
   client.assert(response.body['id_entry'] === 6, "id записи не корректен");
   client.assert(response.body['id_recipient'] === 6, "id контакта не корректен");
   client.assert(response.body['blacklist'] === true, "статус черного списка не корректен");
 });
 %}

### Поиск по списку контактов с информацией о черном списке
GET http://localhost:8082/contactList/11

> {%
   client.test('Отправка контакта в черный список', function () {
   client.assert(response.status === 200, 'Проверяю код ответа. Фактическое знаение: ' + response.status);
   client.assert(response.contentType.mimeType === "application/json", 'Проверяю application/json. Фактическое знаение: ' + response.contentType.mimeType);
   client.assert(response.body['id_entry'] === 11, "id записи не корректен");
   client.assert(response.body['id_recipient'] === 11, "id контакта не корректен");
   client.assert(response.body['blacklist'] === false, "статус черного списка не корректен");
 });
 %}

### Поиск по списку контактов с информацией о черном списке
GET http://localhost:8082/contactList

> {%
   client.test('### Поиск по списку контактов с информацией о черном списке', function () {
   client.assert(response.status === 200, 'Проверяю код ответа. Фактическое знаение: ' + response.status);
   client.assert(response.contentType.mimeType === "application/json", 'Проверяю application/json. Фактическое знаение: ' + response.contentType.mimeType);
   client.assert(response.body.hasOwnProperty('length') && response.body.length === 11, "В ответе есть 5 элемента");
 });
 %}



### Поиск по списку контактов с информацией о черном списке
GET http://localhost:8082/address



### Регистрация нового адреса
POST http://localhost:8082/address/register
Content-Type: application/json

{
  "id_recipient" : 11,
  "address": "Это адрес контакта",
  "status" : "Домашний"
}

### Поиск по списку контактов с информацией о черном списке
GET http://localhost:8082/contactList?id_recipient=1